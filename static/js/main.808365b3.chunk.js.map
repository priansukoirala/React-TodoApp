{"version":3,"sources":["serviceWorker.js","components/ToDoForm.js","components/MyToDo.js","components/OurToDo.js","index.js"],"names":["Boolean","window","location","hostname","match","ToDoForm","state","inputText","heading","props","listItems","listItem","count","shouldHide","buttonStatus","defaultColor","bgColorOptions","myInput","this","setState","index","newItemArray","splice","shouldHideValue","bgColor","console","log","className","map","onClick","changeBgColor","style","backgroundColor","showHideToDoList","onSubmit","addNewItem","placeholder","type","value","onChange","e","userInput","target","autoFocus","disabled","val","key","isChecked","deleteItem","Component","MyToDo","OurToDo","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCChBeC,E,4MAEnBC,MAAQ,CACNC,UAAW,GACXC,QAAS,EAAKC,MAAMD,QACpBE,UAAW,EAAKD,MAAME,SACtBC,MAAO,EAAKH,MAAMG,MAAQ,EAC1BC,YAAY,EACZC,aAAc,IACdC,aAAc,UACdC,eAAgB,CAAC,MAAO,SAAU,QAAS,Y,wDAQnCC,GACRC,KAAKC,SAAS,CACZZ,UAAWU,M,iCAYJA,GACTC,KAAKC,SAAS,CACZT,UAAU,GAAD,mBAAMQ,KAAKZ,MAAMI,WAAjB,CAA4BO,IACrCV,UAAW,O,iCAGJa,GACT,IAAIC,EAAeH,KAAKZ,MAAMI,UAC9BW,EAAaC,OAAOF,EAAO,GAC3BF,KAAKC,SAAS,CACZR,SAAUU,M,uCAGGE,GACVA,EAMHL,KAAKC,SAAS,CACZN,YAAY,EACZC,aAAc,MAPhBI,KAAKC,SAAS,CACZN,YAAY,EACZC,aAAc,Q,oCAwBNU,GACZN,KAAKC,SAAS,CACZJ,aAAcS,M,4CAGIf,EAAOH,GAC3B,GAAoB,IAAhBA,EAAMM,MACR,OAAO,I,2CAITa,QAAQC,IAAI,0B,+BAEJ,IAAD,OACP,OACE,yBAAKC,UAAS,sBAAiBT,KAAKZ,MAAMS,eACvCG,KAAKZ,MAAMU,eAAeY,KAAI,SAACJ,GAAD,OAC7B,4BACEK,QAAS,kBAAM,EAAKC,cAAcN,IAClCO,MAAO,CAAEC,gBAAgB,GAAD,OAAK,EAAK1B,MAAMkB,UACxCG,UAAS,mBAAcH,QAM3B,yBAAKG,UAAU,cACb,4BAAKT,KAAKZ,MAAME,SAChB,4BAAQqB,QAAS,kBAAM,EAAKI,iBAAiB,EAAK3B,MAAMO,cACtD,2BAAIK,KAAKZ,MAAMQ,gBAGnB,yBACEa,UACET,KAAKZ,MAAMO,WAAa,oBAAsB,oBAGhD,0BAAMqB,SAAU,kBAAM,EAAKC,WAAW,EAAK7B,MAAMC,aAC/C,2BACEoB,UAAU,YACVS,YAAY,WACZC,KAAK,OACLC,MAAOpB,KAAKZ,MAAMC,UAClBgC,SAAU,SAACC,GAAD,OAAO,EAAKC,UAAUD,EAAEE,OAAOJ,QACzCK,WAAS,IAEX,4BACEhB,UAAS,oBACqB,WAA5BT,KAAKZ,MAAMS,aACP,SAC4B,QAA5BG,KAAKZ,MAAMS,aACX,YAC4B,UAA5BG,KAAKZ,MAAMS,aACX,aACA,YAENc,QAAS,kBAAM,EAAKM,WAAW,EAAK7B,MAAMC,YAC1CqC,UAAW1B,KAAKZ,MAAMC,WAXxB,UAgBF,2BAAIW,KAAKZ,MAAMC,WACf,4BACGW,KAAKZ,MAAMI,UAAUkB,KAAI,SAACiB,EAAKzB,GAAN,OACxB,wBACE0B,IAAK1B,EACLO,UAAW,EAAKrB,MAAMyC,UAAY,UAAY,aAE7CF,EACD,2BAAOR,KAAK,aACZ,4BACEV,UAAU,eACVE,QAAS,kBAAM,EAAKmB,WAAW5B,KAFjC,gB,GAhJsB6B,aCCjBC,E,4MACnB5C,MAAQ,CACNE,QAAS,KACTG,SAAU,CAAC,WACXC,MAAO,G,uDAGP,OACE,6BASE,kBAAC,EAAD,CACEJ,QAASU,KAAKZ,MAAME,QACpBG,SAAUO,KAAKZ,MAAMK,SACrBC,MAAOM,KAAKZ,MAAMM,a,GApBQqC,aCAfE,E,4MACnB7C,MAAQ,CACNE,QAAS,MAETG,SAAU,CAAC,YACXC,MAAO,G,uDAGP,OACE,6BACE,kBAAC,EAAD,CACEJ,QAASU,KAAKZ,MAAME,QACpBG,SAAUO,KAAKZ,MAAMK,SACrBC,MAAOM,KAAKZ,MAAMM,a,GAbSqC,aCKrCG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK3B,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJ4B,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.808365b3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nexport default class ToDoForm extends Component {\r\n  // Using the props from Parent Class and storing it in a new state in Child class; Could also be done by using getDerivedStateFromProps method\r\n  state = {\r\n    inputText: \"\",\r\n    heading: this.props.heading,\r\n    listItems: this.props.listItem,\r\n    count: this.props.count + 1,\r\n    shouldHide: false,\r\n    buttonStatus: \"-\",\r\n    defaultColor: \"default\",\r\n    bgColorOptions: [\"red\", \"purple\", \"green\", \"default\"],\r\n  };\r\n\r\n  // static getDerivedStateFromProps(prevProps, prevState) {\r\n  //   return {\r\n  //     listItems: prevProps.listItem,\r\n  //   };\r\n  // }\r\n  userInput(myInput) {\r\n    this.setState({\r\n      inputText: myInput,\r\n    });\r\n  }\r\n  // addNewItem(myInput) {\r\n  //   let newItemArray = this.state.listItems;\r\n  //   newItemArray.push(myInput);\r\n\r\n  //   this.setState({\r\n  //     listItem: newItemArray,\r\n  //     inputText: \"\",\r\n  //   });\r\n  // }\r\n  addNewItem(myInput) {\r\n    this.setState({\r\n      listItems: [...this.state.listItems, myInput],\r\n      inputText: \"\",\r\n    });\r\n  }\r\n  deleteItem(index) {\r\n    let newItemArray = this.state.listItems;\r\n    newItemArray.splice(index, 1);\r\n    this.setState({\r\n      listItem: newItemArray,\r\n    });\r\n  }\r\n  showHideToDoList(shouldHideValue) {\r\n    if (!shouldHideValue) {\r\n      this.setState({\r\n        shouldHide: true,\r\n        buttonStatus: \"+\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        shouldHide: false,\r\n        buttonStatus: \"-\",\r\n      });\r\n    }\r\n  }\r\n  // isChecked(index) {\r\n  //   if (this.state.listItems[index].isChecked) {\r\n  //     this.setState({\r\n  //       listItems: update(this.state.listItems, {\r\n  //         index: { isChecked: { $set: false } },\r\n  //       }),\r\n  //     });\r\n  //   } else {\r\n  //     this.setState({\r\n  //       listItems: update(this.state.listItems, {\r\n  //         index: { isChecked: { $set: true } },\r\n  //       }),\r\n  //     });\r\n  //   }\r\n  // }\r\n  changeBgColor(bgColor) {\r\n    this.setState({\r\n      defaultColor: bgColor,\r\n    });\r\n  }\r\n  shouldComponentUpdate(props, state) {\r\n    if (state.count === 1) {\r\n      return true;\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    console.log(\"Component did update\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={`ToDoList bg-${this.state.defaultColor}`}>\r\n        {this.state.bgColorOptions.map((bgColor) => (\r\n          <button\r\n            onClick={() => this.changeBgColor(bgColor)}\r\n            style={{ backgroundColor: `${this.state.bgColor}` }}\r\n            className={`my-bg bg-${bgColor}`}\r\n          >\r\n            {/* {bgColor} */}\r\n          </button>\r\n        ))}\r\n\r\n        <div className=\"ToDoHeader\">\r\n          <h2>{this.state.heading}</h2>\r\n          <button onClick={() => this.showHideToDoList(this.state.shouldHide)}>\r\n            <b>{this.state.buttonStatus}</b>\r\n          </button>\r\n        </div>\r\n        <div\r\n          className={\r\n            this.state.shouldHide ? \"hiddenToDoContent\" : \"shownToDoContent\"\r\n          }\r\n        >\r\n          <form onSubmit={() => this.addNewItem(this.state.inputText)}>\r\n            <input\r\n              className=\"inputText\"\r\n              placeholder=\"New Item\"\r\n              type=\"text\"\r\n              value={this.state.inputText}\r\n              onChange={(e) => this.userInput(e.target.value)}\r\n              autoFocus\r\n            ></input>\r\n            <button\r\n              className={`addButton ${\r\n                this.state.defaultColor === \"purple\"\r\n                  ? \"bg-red\"\r\n                  : this.state.defaultColor === \"red\"\r\n                  ? \"bg-purple\"\r\n                  : this.state.defaultColor === \"green\"\r\n                  ? \"bg-default\"\r\n                  : \"bg-green\"\r\n              }`}\r\n              onClick={() => this.addNewItem(this.state.inputText)}\r\n              disabled={!this.state.inputText}\r\n            >\r\n              + ADD\r\n            </button>\r\n          </form>\r\n          <p>{this.state.inputText}</p>\r\n          <ul>\r\n            {this.state.listItems.map((val, index) => (\r\n              <li\r\n                key={index}\r\n                className={this.state.isChecked ? \"striked\" : \"unstriked\"}\r\n              >\r\n                {val}\r\n                <input type=\"checkbox\" />\r\n                <button\r\n                  className=\"removeButton\"\r\n                  onClick={() => this.deleteItem(index)}\r\n                >\r\n                  x\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ToDoForm from \"./ToDoForm\";\r\n\r\nexport default class MyToDo extends Component {\r\n  state = {\r\n    heading: \"My\",\r\n    listItem: [\"My List\"],\r\n    count: 0,\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <ToDoForm\r\n          heading={this.state.heading}\r\n          inputText={this.state.inputText}\r\n          listItem={this.state.listItem}\r\n          userInput={this.userInput.bind(this)}\r\n          addNewItem={this.addNewItem.bind(this)}\r\n          deleteItem={this.deleteItem.bind(this)}\r\n        /> */}\r\n        <ToDoForm\r\n          heading={this.state.heading}\r\n          listItem={this.state.listItem}\r\n          count={this.state.count}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ToDoForm from \"./ToDoForm\";\r\n\r\nexport default class OurToDo extends Component {\r\n  state = {\r\n    heading: \"Our\",\r\n    // listItem: [\"Our List\"],\r\n    listItem: [\"Our Todo\"],\r\n    count: 0,\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ToDoForm\r\n          heading={this.state.heading}\r\n          listItem={this.state.listItem}\r\n          count={this.state.count}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MyToDo from \"./components/MyToDo\";\nimport OurToDo from \"./components/OurToDo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"mainContainer\">\n      <MyToDo />\n      <OurToDo />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}